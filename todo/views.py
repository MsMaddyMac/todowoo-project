from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.forms import UserCreationForm, AuthenticationForm
from django.contrib.auth.models import User
from django.db import IntegrityError
from django.contrib.auth import login, logout, authenticate
from .forms import TodoForm
from .models import Todo
from django.utils import timezone
# Anytime you place this in front of a function, you will only be able to access the page if you are logged in
from django.contrib.auth.decorators import login_required

# Create your views here.
def home(request):
  return render(request, 'todo/home.html')

def registeruser(request):
  if request.method == 'GET':
    # to use Django generated form, create import first
    # render form in registeruser.html
    return render(request, 'todo/registeruser.html', {'form':UserCreationForm()})
  else:
    # import User model which is autogenerated with Django magic
    # invoke the User() with built in methods and pass in the request info from the form by referencing the keys of each input to be used.
    # If password1 is equal to password2 create new user
    if request.POST['password1'] == request.POST['password2']:
      try:
          # Create a new user
        user = User.objects.create_user(username = request.POST['username'], password = request.POST['password1'])
          #  Save new user in database
        user.save()
        # log newly created user in upon successful creation
        login(request, user)
        return redirect('currenttodos')
      except IntegrityError:
        return render(request, 'todo/registeruser.html', {'form': UserCreationForm(), 'error':'Username is already taken. Please choose a new one!'})
    else:
      return render(request, 'todo/registeruser.html', {'form':UserCreationForm(), 'error':'Passwords did not match!'})
 
def loginuser(request):
    if request.method == 'GET':
      return render(request, 'todo/loginuser.html', {'form': AuthenticationForm()})
    else:
      user = authenticate(request, username = request.POST['username'], password = request.POST['password'])

      if user is None:
         return render(request, 'todo/loginuser.html', {'form': AuthenticationForm(), 'error': 'Username and password did not match!'})
      else:
        login(request, user)
        return redirect('currenttodos')

@login_required        
def logoutuser(request):
  if request.method == 'POST':
    logout(request)
    return redirect('home')

@login_required  
def createtodo(request):
  if request.method == 'GET':
    return render(request, 'todo/createtodo.html', {'form': TodoForm()})
  # by setting commit = False, a new todo will not be saved in the db right away
  else: 
    try:
      form = TodoForm(request.POST)
      newtodo = form.save(commit=False)
      newtodo.user = request.user
      newtodo.save()
      return redirect('currenttodos')
    except ValueError:
      return render(request, 'todo/createtodo.html', {'form': TodoForm(), 'error': 'Bad data passed in.'})

@login_required 
def currenttodos(request):
  todos = Todo.objects.filter(user=request.user, date_completed__isnull=True)
  return render(request, 'todo/currenttodos.html', {'todos': todos})

@login_required 
def viewtodo(request, todo_pk): 
  todo = get_object_or_404(Todo, pk=todo_pk, user=request.user)
  if request.method == 'GET':
    form = TodoForm(instance=todo)
    return render(request, 'todo/viewtodo.html', {'todo': todo, 'form': form})
  else:
    try:
      form = TodoForm(request.POST, instance=todo)
      form.save()
      return redirect('currenttodos')
    except ValueError:
      return render(request, 'todo/viewtodo.html', {'todo': todo, 'form': form, 'error': 'Bad info.'})

@login_required     
def completetodo(request, todo_pk):
  todo = get_object_or_404(Todo, pk=todo_pk, user=request.user)
  if request.method == 'POST':
    todo.date_completed = timezone.now()
    todo.save()
    return redirect('currenttodos')

@login_required   
def deletetodo(request, todo_pk):
  todo = get_object_or_404(Todo, pk=todo_pk, user=request.user)
  if request.method == 'POST':
    todo.delete()
    return redirect('currenttodos')

@login_required 
def completedtodos(request):
  todos = Todo.objects.filter(user=request.user, date_completed__isnull=False).order_by('-date_completed')
  return render(request, 'todo/completedtodos.html', {'todos': todos})

